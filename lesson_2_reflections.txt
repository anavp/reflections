So here we are in the 3rd lesson.
Question: What happens when you initialize a repository? Why do you need to do it?
Ans: .git file is created upon running the 'git init' command. .git file is hidden file that contains the meta deta of git repository i.e. tracking of all the commits is done in this file and as git doesn't want to unnecessarily clutter our repository, it isn't directly visible i.e. it is hidden.
We need to this because only after running git init command does our directory becomes a git repository and hence .git directory is created.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
Whenever we want to commit, we may face a situation in which we do not want to commit all of our files at once. We may want to stagger our commits with respect to the different files. So to do that git offers something called staging area. We use a command 'git add' to add the files we want to commit to the staging area and then when we commit, only the files in the staging area will be commited.
As for how staging area is different from the working directory and the repository: staging area is a kind of a snapshot of the commit we are gonna make. Obviously it is different from the working directory because, first of all, it contains only the files we want to commit, not all of them. Secondly, working directory is the directory we directly work in, while staging area is there for the sole reason so as to allow us the option of commiting some files instead of all. The repository on the other hand is the place where the most recent version of our code is there (i.e. upto the latest commit). We work in the working directory and upon a commit the repository is updated to include the latest commit.

How can you use the staging area to make sure you have one commit per logical
change?
Ans: Whenever you are going to commit, if you have any doubts that whether you have made only one logical change or not, you can check that by using the commmand git diff --staged, given that your commit is ready to be committed i.e. you have the files you were going to commit to the staging area already. Now, git diff --staged compares the files in your staging area to the last commit you made. So, in this way, you can check if you have made only one logical change or not.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Ans: As mentioned in the lecture, branches would be very helpful in a situation when we need to make a drastic experimental change and we want to keep working on our already working code too. So we can create a branch from our already working branch and our new branch would contain all of our previous files and now, we can work on our experimental change without any fear.

How do the diagrams help you visualize the branch structure?
Ans: The diagrams are immensely helpful as due to the diagram, I don't have to examine the logs of each branch to where one branch branches out and what are the subsequent commits made to each branch after the common commit.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?





Wow, I am super confused right now. Let type all the git commands here from now on:
git log
git log --stat
git log --graph --oneline branch1 branch2 : Displays commits in two branches in a comparable way. --oneline makes the
output easier to understand.
git log branch : shows log of branch "branch"
git diff -u commit1 commit2
git diff : compares b/w working area and staging area which by default contains the last commit
git diff --staged: compares b/w staging area and the last commit
git status
git branch : shows the list of branches
git branch branchname : creates a branch called branchname
git checkout commitID
git checkout master : changes from detached head state to normal
git checkout branchname : command for shifting the specified branch
git checkout -b newbranchname : if you are at head and want to create a new branch containing the last commit and all of it's subsequent parents then use the mentioned command.
git add file name
git add *
git commit
git commit -m "commit message"
git init : initializes a repository
git gc : runs git's garbage collection. Deletes unreachable commits without commit ids
git show commitid : shows differences between a commit and it's parent
git merge branch1 branch2 : merges branch1 and branch2. branch1 is merged into branch2 if branch2 checked out and vice versa.
git merge branch1 branch2 branch3 ... : will merge branches branch1, branch2, branch3 ... into the branch checked out
git merge --abort : will abort merge. used when there's a auto-merging conflict.


